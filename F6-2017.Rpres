F6-2017
========================================================
author: 
date: 
autosize: true

First Slide
========================================================

For more details on authoring R presentations please visit <https://support.rstudio.com/hc/en-us/articles/200486468>.

- Bullet 1
- Bullet 2
- Bullet 3

Slide With Code
========================================================

```{r}
summary(cars)
```

Slide With Plot
========================================================

```{r, echo=FALSE}
plot(cars)
```
% Open and reproducible research
% Charles Plessy
% Yokohama, February 27th, RIKEN-KI course 2017

# Too many slides ?

 ❦ Wow, the slide count is high, will there be overtime ?

 ❦ Don't panic.

 ❦ Ask as many questions as you want.

 ❦ Let's have a productive discussion.

 ❦ We do not need go through all the slides.	
 
# Make your science open and reproducible !

## For reproducible research, we want to:

Ensure that us and others can reach the same conclusion when the
experiment is performed again.  Translated to bioinformatics, that
means to:
 
 ❦ Keep a track of the commands that were run;

 ❦ Prove that the results are not erroneous (file swap, ...) or
   manipulated, by showing how to re-generate table and figure
   elements from scratch;

 ❦ Remember when and how we developed our analysis (this is also handy
   in case of authorship disputes...).  This is the first step towards
   letting others confirm or challenge the results with other tools.

## Open science

The best practices of open science set the stage for reproducible research.

------------------------------------------------------------------------

# Keep track of the commands that were run

 ❦ The `history` command is a good start, but it is noisy.

    mycommnd foo.fa --length 7
	mycommand foo.fa --length 7
	mycommand foo.fa --length 8
	othercommand foo.fa | mycommand --length 8
	...
	
 ❦ When possible, use *integrated development environments* to edit
   *and* run your commands with a proper text editor (one example among
   many: [RStudio](https://www.rstudio.com/)).

 ❦ Use programming and scripts as much as possible, instead of doing
   some calculations or operations by hand, in a way that is hard to
   describe.

 ❦ It takes time, but will pay off. 

My new motto: *I am too busy to work quickly.*

Tip: be careful about what you promise.  Delivering *on time* is the
key.

------------------------------------------------------------------------

# Remember when and how the analysis was developed

 ❦ Track changes, but do not follow that example:

    myscript_2016.09.12.sh
    myscript_2016.10.30.sh
	myscript_2017.01.07.sh
	…

 ❦ In the XXI<sup>th</sup> century, use **Version Control Systems**
   (also known as revision control systems, source code management
   systems, ...).  They give powerful ways to browse the history, and
   much more.

 ❦ Version Control Systems are especially good for source code, but
   also work for manuscripts or small-scalle data that does not vary
   too frequently.  As of today, managing large files still requires
   some expertise.

------------------------------------------------------------------------

# Ensure that you and others can run the analysis again.

Two approaches:

 ❦ Freeze the environment (using snapshots, virtual machines or
   containers).

 ❦ Test regularly if the analysis can be re-done in a fresh
   environment.  This is called *"continuous integration"* (CI).

------------------------------------------------------------------------

# Ensure that you and others can run the analysis again, part 2

## Open the data to the public.

 ❦ The data must be accessible : his is a requirement for publication
   (although not for all kind of data).
 
 ❦ Make sure that your analysis can run on the open data, not just on
   your local copy on your intranet.
 
 ❦ Best practice in my opinion: open data prior publication.
 
------------------------------------------------------------------------

# Ensure that you and others can run the analysis again, part 3

## Make backups

Make sure your backups work as intented.  Think of the consequences
if the backup is lost.

 ❦ Do not feel safe with nighly backup.  They only protects from hard
   drive crashes.  Buyt what if your data is slowly corrupted by a
   defective memory chip, or if you delete a file and only realise 48h
   later ?

 ❦ Backups are like the Schrödinger cat: you only know if they are still
   alive after you open the box.  Tapes get lost, etc.  Always have more
   than one copy of the data that you can not afford to lose.

 ❦ There are many ways to lose your data.  Have you heard about RaaS ?
   It means Ransomware as a Service; have a look at press articles
   about it !!

 ❦ Publication and data release to public databanks are the best
   backup.

------------------------------------------------------------------------

# Version Control System to the rescue.

 ❦ There has been many VCS around, but as of 2017 Git is by far the
   clear leader.  [Try](http://gitreal.codeschool.com/levels/1)
   [Git](https://try.github.io/) !

 ❦ Git is a *distributed* VCS.  A Git repository can be cloned on
   multiple computers; each clone contains the full data and its full
   history.  Thus, each clone are more or less backups of each other.
   (Until you learn to use advanced commands for *destructive*
   operations).

 ❦ There are [many ways](https://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows)
   to use a network of Git repositories to manage a collaboration.
   In brief, the bigger the project, the more the rules.

------------------------------------------------------------------------

# Git's concepts in a few words.

(experts will notice that I somewhat simplified things)

 ❦ A *repository* or *clone* is a directory and its subdirectories,
   which contain your precious files as well as a `.git` directory
   that contains their history.

 ❦ A *commit* is an incremental modification of one or more files in
   the repository, linked with a *commit message* providing the rationale
   for the changes.
 
 ❦ A *tag* is a label pointing to a commit of interest at a given time
   in the history.  (For instance, each time a paper was resubmitted.)
 
 ❦ A *branch* is a way to provide alternative version of files.  (For
   instance, in one of my repository I have a hg19 and hg38 branch.)
 
 ❦ A *push* and a *pull* are exchanges of commits between repositories.
   (There are checks to prevent the blind exchange of incompatible
   commits.  When `git push` or `git pull` give errors, read carefully
   and entirely the error message.)

------------------------------------------------------------------------

# Authentication and signature.

 ❦ Using standard cryptographic methods, it is possible to certify that
   commits have been made by a known person.  (Otherwise, anybody can
   pretent to be Charles Plessy.)

![Example of signed commit on GitHub](SignedCommit.png)

------------------------------------------------------------------------

# Forges

 ❦ Websites providing an integrated environment for collaborative
   software development are sometimes called *Forges*.
   
 ❦ [SourceForge](https://sourceforge.net/) was the most famous, but it
   aged.  Let's have a look at [GitHub](https://github.com) and
   [GitLab](https://gitlab.com)

 ❦ Forges provide additionnal content such as issue trackers or wikis.
   These are not cloned with the Git repository hosted on the forge.
   *You have no personal backup of this metadata unless you used a
   [special tool](https://github.com/joeyh/github-backup) for this.*

------------------------------------------------------------------------

# GitHub/Lab can be used as rudimentary websites

 ❦ Text files in structured format are displayed after rendering.
   [Markdown](https://daringfireball.net/projects/markdown/) (usual
   file suffix: `.md`).  By the way, the source of this presentation
   is also in Markdown format.

 ❦ Both platforms will refuse to serve HTML for security and traffic
   reasons.  But if you use GitHub, have a look at
   [rawgit.com](https://rawgit.com/).  Software developers may be
   interested in [readthedocs.org](https://readthedocs.org/); see the
   documentation of[BEDTools](http://bedtools.readthedocs.io/en/latest/)
   for example.

 ❦ GitHub and GitLab also provide their own mechanisms for building
   small websites: [GitHub pages](https://pages.github.com/), where
   the contents are either on a special repository or on a special
   branch, and [GitLab pages](https://pages.gitlab.io/), where the
   contents are built with a system of *continuous integration*
   (called *shared runner*).

 ❦ This said, on your intranet you can also just commit HTML pages and
   serve them with a simple web frontend such as
   [cgit](https://git.zx2c4.com/cgit/).

------------------------------------------------------------------------

# Contiunous integration

This is a very broad topic, but let's look at a few examples.
(if we have time)

 ❦ Runners on GitLab (example on our intranet).
 
 ❦ Travis on GitHub.

------------------------------------------------------------------------

# How to inspect differences between OpenDocument or Word files with Git.

## This slide is skipped in the interest of time, but feel free to ask
   questions on that topic.

Commands such as `git diff` display the differences between text files.  But
when Git can convert binary files to text, then it can also show differences
between binary files.  Here is how.

First, install a converter.  For instance on Debian systems, install
the `odt2txt` and the`antiword` packages to convert OpenDocument and
Word files (respectively).  Then, configure, your Git system to use
them, using the following commands:

    git config diff.MS-Word.textconv antiword
    git config diff.OpenDocument.textconv odt2txt

Then declare which file suffix is for which file type, by setting a
`.gitattributes` file with the following contents:

	*.doc diff=MS-Word
    *.odt diff=OpenDocument
	
Now with commands such as `git log --patch
yourGreatManuscriptDraft.odt`, you can display in plain text the
changes between revisions of the files.

------------------------------------------------------------------------

# Digression on checksums

## (skipped in the interest of time, but feel free to ask questions)

 ❦ Checksums are like fingerprints for files.  For every file, even
   very large ones, one can compute a short identifier, that is easy
   to inspect.

 ❦ If two different files have the same checksum, it is called a
   *collision*, that would mislead us thinking that the two files are
   the same.  This problem should be very rare, but...
 
 ❦ Collisions happen either by chance, or because an attacker wants to
   trick a victim.  See <https://shattered.io/>, for instance.

 ❦ The longer the sum, the better the security... and the more it is
   inconvenient to read and use.

    $ md5sum RIKEN-KI-Yokohama-2017.md  # Broken
    7e3211937cf1d8f9bbc41ae3f010eb9f  RIKEN-KI-Yokohama-2017.md
	
    $ sha1sum RIKEN-KI-Yokohama-2017.md  # Broken
    fd58d4dafd39c90722a5fb3bd1c50ffe65a0af13  RIKEN-KI-Yokohama-2017.md
    
    $ sha256sum RIKEN-KI-Yokohama-2017.md  # SHA-2, not yet broken
    7471f77ae33fe8cb6db12555f8d8533aae8831ce1328fe90315bae2a6764ef32  RIKEN-KI-Yokohama-2017.md

    $ sha512sum RIKEN-KI-Yokohama-2017.md  # SHA-2, not yet broken
    c02d3c129bfc6263dcc96d1decc3dcead6a10cf8e0b33ce7d1d3820b89aa8fa9c2f5dc612d098ad822d6d42ad5ffd870bdf39b1dd6d4a7bb1bf16f4bac4d038a  RIKEN-KI-Yokohama-2017.md

 ❦ When there is a risk of attack, I would use sha256; it seems to be
   the default choice today.  In many trivial cases, MD5 is still fine.

 ❦ (By the way, none of the programs above seem to be installed on Mac
   OS X, but if SHA-1 is still OK for your purposes, there is the
   `shasum` program, that is installed on Mac and Linux because it
   comes with Perl.)

------------------------------------------------------------------------

# First steps in <code>R</code> with [Rstudio](http://www.rstudio.com/)

## The console

```r
> 1 + 1
[1] 2
```

```r
> packageDescription('stats')
Package: stats
Version: 3.1.1
Priority: base
Title: The R Stats Package
Author: R Core Team and contributors worldwide
Maintainer: R Core Team <R-core@r-project.org>
Description: R statistical functions
License: Part of R 3.1.1
Built: R 3.1.1; x86_64-pc-linux-gnu; 2014-10-15
      14:19:59 UTC; unix

-- File: /usr/lib/R/library/stats/Meta/package.rds 
```

## Tip number 1

Press the <code>tab</code> ↹ key.

------------------------------------------------------------------------

# What is <code>R</code> ?

`R` is **Free software**.

`R` is a programming language, that can also be used interactively to
plot graphical results.

Try `boxplot(1,2,3)`.  In _Rstudio_, the plots appear in a special area.
In other environments, such commands just pop up a new window.

## Tip number 2

Do not forget that `R` is a language.  It is not just a plotting software.

For example, `ls` is not `ls()`, `x` is not `'x'`, etc.  Errors like `object
'x' not found` tell that quotes were forgotten.

------------------------------------------------------------------------

# _Equal_ or _assign_ ?

```r
> x == 1
Erreur : objet 'x' introuvable
> x = 1
> x == 1
[1] TRUE
> x
[1] 1
```

In this lecture, and like in many `R` resources, I will use `<-`.

```r
> x <- 1
> x
[1] 1
```

------------------------------------------------------------------------

# What is RStudio ?

(demo on a tab with RStudio server)

------------------------------------------------------------------------

# R Markdown

![](OpenMarkdown.png)

![](Markdown.png)

------------------------------------------------------------------------

# Packages

CRAN,

Bioconductor,

GitHub, ...

## R packages from Linux distributions

R packages from distributions like Debian can be old.  But equally old.

Example <https://packages.debian.org/r-bioc-edger>

Linux distribution are usually better regarding external dependancies.


## Tip number 3

Packages can be installed in various locations; one possible explanation
for ununderstandable errors is that an older version of the package,
installed in a higher-priority location, took precedence.

------------------------------------------------------------------------

# Reproducible research with R, Rmarkdown and knitR

## Literate programming

In literate programming default, text is _comment_.

~~~~
We set `x` to `1` because this number is _important_.
```{r}
x <- 1
```
~~~~

In contrast, in the standard way, by default text is _command_.

```r
x <- 1 # important
```

### knitR

knitR executes the R code in the Rmarkdown file, and embeds the
results of the commands in the final document in various formats such
as HTML, Markdown, PDF or MS-Word.

***This way, the commands used to make a figure are never lost.***

Let's try it in _Rstudio_.

## Tip number 4:

Always run sessionInfo() at the end.

------------------------------------------------------------------------

# Integration between Git and RStudio.

Cherry on the cake, RStudio has a nice interface to work with Git
repositories.  If time remains, let's see it in action.

------------------------------------------------------------------------

Biostars, Support.BioC biostar. StackOverflow, Biostars: discuss in public !

Example Horizon 2020

Docker, packrat, ...



# Random number seed

## Random numbers in R

```
> runif(1)
[1] 0.9064395
> rnorm(1)
[1] -0.8364779
> rpois(1,1)
[1] 0
```

## Random seed

Set the random seed so that identical computations return identical results.

```
> set.seed(1)
> runif(1)
[1] 0.2655087
> runif(1)
[1] 0.3721239
> set.seed(1)
> runif(2)
[1] 0.2655087 0.3721239
> set.seed(1)
> runif(1)
[1] 0.2655087
> rm(.Random.seed)
> runif(1)
[1] 0.4206369
```

## Tip number 5

Always do your first analysis without setting the random seed, and never ever
use the random seed to pick up the most pleasing result.

------------------------------------------------------------------------

# Subsampling

## Normalisation

Some values do not scale proportionally with the number of reads in a library.
A simple normalisation approach is to use only as many tags as in the most
_shallow_ library.

The `rrarefy` command of the `vegan` packages does this.

<https://rawgit.com/charles-plessy/tutorial/master/CAGE_normalisation_by_subsampling/subsampling.html>

### Tip number 6

Be careful, some commands in `vegan` work by default on rows, not on columns.

------------------------------------------------------------------------

# Did we sequence enough reads ?

![](Purkinje1.svg) ![](Purkinje2.svg)

------------------------------------------------------------------------

# What would we see if there were only 100 tags in a library ?

External file: `Richness.pdf`.

`rarefy` (only one `r`) from the `vegan` packages asks this question for
any number of tags 

This is the _richness_ index (Stuart H. Hurlbert (1971).  The Nonconcept of
Species Diversity: A Critique and Alternative Parameters. Ecology 52:577–586.
<http://dx.doi.org/10.2307/1934145>):  the “expected number of species in a
sample individuals selected at random from a collection”.

## The lowest scores in FANTOM5 PHASE 1

```
34.40602	salivary.20gland.2c.20adult.2c.20pool1.CNhs11677.10093.102C3
39.81204	parotid.20gland.2c.20adult.CNhs12849.10199.103F1
41.08809	Whole.20blood.20.28ribopure.29.2c.20donor090309.2c.20donation2.CNhs11671.12180.129A2
42.64403	Whole.20blood.20.28ribopure.29.2c.20donor090612.2c.20donation3.CNhs11949.12184.129A6
45.97416	submaxillary.20gland.2c.20adult.CNhs12852.10202.103F4
46.08281	pancreas.2c.20adult.2c.20donor1.CNhs11756.10049.101G4
```

## And the highest scores

```
97.07249	counts.nucleus.20accumbens.2c.20adult.2c.20pool1.CNhs10644.10037.101F1
97.13775	counts.lens.20epithelial.20cell.20line.3aSRA.2001.2f04.CNhs11750.10647.109A8
97.26068	counts.insula.2c.20adult.2c.20pool1.CNhs10646.10039.101F3
97.29081	counts.Clontech.20Human.20Universal.20Reference.20Total.20RNA.2c.20pool1.CNhs10608.10000.101A1
97.30655	counts.choriocarcinoma.20.20cell.20line.3aT3M.3.CNhs11820.10618.108G6
97.35912	counts.kidney.2c.20fetal.2c.20pool1.CNhs10652.10045.101F9
```

------------------------------------------------------------------------

# Potential shortcoming

The calculation of the richness score ignores the zero values. For instance, on
a scale of 10, the following clusters would have the maximum score (10).

```
cluster1: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
cluster2: 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0
cluster3: 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0
```

The solution is to down-sample on a scale that is at least as high as the
number of libraries: in that case, there is more than one tag to distribute per
library, so zero values are echoed by increased tag counts in other libraries. 

### Tip number 7

Merge similar libraries (replicates, etc) if needed. 

------------------------------------------------------------------------

# Similarity between libraries.

External file: `Distance_and_clusters.pdf`.

## Tip number 8

Use `distfun=function(...){h}`, where `h` is a distance matrix, to force the
correct dendrogram with `heatmap.2()`.

## Tip number 9

`R` is getting better at using multi-core processors.

```r
library(parallel)
cl <- makeCluster(2, type = "PSOCK")
parPvclust(cl, your-data-frame, nboot=1000)
```

------------------------------------------------------------------------

# rowsum

_Not to be confused with `rowSums`..._

External file: `CAGE_differential_analysis1.html`

------------------------------------------------------------------------

# Edit your graphs with Inkscape

http://www.inkscape.org

## Tip

Deduplicate and round data before plotting it.

```r
plotSlimSmear <- function(COMP, ROUND=2, PCH=19, CEX=1, ...) {
  roundUnique <- function(TABLE) unique(round(TABLE, ROUND))
  dgeObj <- get(paste(COMP, 'com', sep='.'))
  upList        <-   up(dgeObj)
  downList      <- down(dgeObj)
  notSignifList <- setdiff( rownames(dgeObj)
                          , c(up, down))
  dgeTable <- dgeObj$table[,c('logCPM', 'logFC')]
  upTable        <- roundUnique(dgeTable[upList,  ])
  downTable      <- roundUnique(dgeTable[downList,])
  notSignifTable <- roundUnique(dgeTable[notSignifList,])
  plot(dgeTable, main=COMP, type='n')
  grid()
  points(notSignifTable, col='grey', pch=PCH, cex=CEX)
  points(upTable,        col='blue', pch=PCH, cex=CEX)
  points(downTable,       col='red', pch=PCH, cex=CEX)
}
```

------------------------------------------------------------------------

# Making your R packages !

A R package contains a bit of metadata, R functiond, unit tests, and
documentation in Sweave or... Markdown.

Let's see <https://github.com/charles-plessy/oscR>.

------------------------------------------------------------------------

# Pipes in <code>R</code>: <code>magrittr</code>, ...

<http://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html>

`head(unique(round(subset(mydataframe, value > 100` .... and how many closing parentheses after this ?

Pipes in the shell:

```sh
grep myfile.txt | head
```

Pipes in `R` with `magrittr`.

```
mydataframe %>% head
```


------------------------------------------------------------------------


# Open science

With all these tools, you can make excellent open science.

 ❦ Make your work reproducible from the start.  **This includes
   discussiong with your collaborators and making very sure that
   they understand what is meant by <em>open</em>.**
 
 ❦ Think loud, discuss loud, blog, tweet, discuss your technical
   issues on forums such as
   [StackOverflow](https://stackoverflow.com/) or
   [Biostars](https://www.biostars.org/), so that 1) everybody elese
   can learn from your experience and 2) in a year or two, when you
   have forgot the answers, you can find them with a simple search
   engine.

 ❦ Release atomic units of your work on platform providing version
   control, continuous integration and website rendering.

 ❦ Open your raw data on Figshare, Dryad, Zotero, ...

 ❦ Make your manuscript available as a preprint on
   [bioRxiv](http://biorxiv.org/) prior submitting to peer review.
   
------------------------------------------------------------------------

# Debian Med

Disclaimer: I am biased because I am member of the Debian Med project.

Large number of available tools.

Released every ~2 years within the Stable Debian distribution.

Some updates are available through the `stable-backports` repository.

Packages can always be found in <snapshot.debian.org>.  This repository
does not contain all the versions of a tool, but all the versions *that
were packaged*.  For some tools, this does not make a large difference.
Let's see <http://snapshot.debian.org/package/bedtools/> as an example.

------------------------------------------------------------------------

# Take home message

Desing your research to be reproducible *from the start*.

Make sure your collaborators and supervisor are in agreement.

------------------------------------------------------------------------


# Thanks

Questions ?

------------------------------------------------------------------------

# How was this presentation made ?

Markdown

pandoc

    pandoc --standalone -t slidy -i RIKEN-KI-Yokohama-2017.md -o RIKEN-KI-Yokohama-2017.html

emacs with Markdown mode (tab to fold/unfold slides)
