<style>
.footer {
    color: black; background: #E8E8E8;
    position: fixed; top: 90%;
    text-align:center; width:100%;
}
.midcenter {
    position: fixed;
    top: 50%;
    left: 50%;
}
</style>

Introduction to R, RStudio, R Notebooks and R presentations
========================================================
author: Charles Plessy
date: Yokohama, August 30th
autosize: true

<br/>
<center class="midcenter">![R](Aufseeser_lettrine_R.png)</center>
<br/>


Why R?
========================================================

 ❦ Because my colleagues use it.

 ❦ Because it has extensive coverage and documentation
   on statistics and bioinformatics.
 
 ❦ To prepare figures that add graphical elegance to the facts.

 ❦ Because it is efficient.
 
 ❦ Because it plays well with open science and reproducible research.

 ❦ Because I love it.


What is R ?
========================================================

`R` is a language.  You can use it write commands that ask the
computer to do things for you, and you can combine them in programs
(also called _scripts_).

`R` is **Free software**.

`R` is an interactive platform that can be used for exploratory
analysis.  It is very good at quickly plotting summaries.

With extensions such as _R Shiny_ and _R Markdown_, `R` is also
becoming a platform for releasing results.


The R language
======================================================== 

`R` calls variable "_objects_"; their names are plain text (no prefix such as `$`, etc).
In `R` programs, objects are rarely declared before use, but beware that they have no default value.

```{r error=TRUE}
x + 1
```

Often you will see this error when you forget to quote text.

```{r error=TRUE}
read.csv(file = myFile.csv)
```


How to assign values to the objects
======================================================== 

Just like in English, in programming languages, pay attention that "is equal to" and
"is it equal to" can misleadingly look the same.

```{r}
x = 1
x
```

```{r}
x == 1
```

In this lecture, and like in many `R` resources, the leftwards arrow ("`<-`")" is used
instead of the equal sign.  The rightwards arrow is seen more rarely, but can be
useful in interactive sessions.

```{r}
x <- 1
1 -> x
```

The R language likes vectors
======================================================== 

Most languages made differnces between _scalars_ and _arrays_.
In `R`, _scalars_ are vectors of length one.

```{r}
"a"
c("a")
c("a", "b")
```

***

Vectorized operations in R are idiomatic and efficient.  Short vectors
are often _recycled_.

```{r}
x <- c(1,2,3)
y <- c(10, 10, 20)
x + y
paste(x, y, sep = "_")
paste0(x, ".txt")
paste(y, collapse = "~~")
```


Lists: a second core class of R
======================================================== 

Vectors can only contain elements of the same kind.  R will
frequently _coerce_ the data if needed.

```{r error = TRUE}
x <- c(1, 2, 3, "apples!")
x
class(x)
c(1, c(2, 3), FALSE)
```

***

Lists can mix elements from many kinds, and can be nested.

```{r}
list(1, c(2, 3), "apples!", list(T,F))
```


Data frames: a famous object class from the R language
======================================================== 

`data.frame`s are lists presented like tables.

```{r}
df <- data.frame( fruits = c("apples", "bananas", "oranges")
                , price  = c(2, 1.5, 1.7)
                , color  = factor(c("yellow", "yellow", "orange"))
                , stringsAsFactors = FALSE)
df
summary(df)
```

For more performance or modernity, look for `DataFrame`, `data.table` or
`tibble`.


Subsetting elements of objects
======================================================== 

In brief: by coordinate...

```{r}
letters[6]
df[2,3]
df[,1]
```

***

...or by name:

```{r}
df[["price"]]
df$pri
```

Tip: in `R`, (almost) everything has a manual page.  Try: `help("[")`


Different ways to say "nothing"
======================================================== 

```{r}
NA   # not available
NULL # nothing
```

***

```{r}
sum(1,2,NA)
sum(1,2,NA, na.rm=T)
```


The R console
======================================================== 

R has a command line interface (CLI).  Not only you can use it like a calculator,
but you can allso plot graphs.

```{r}
1 + 1
```

***

Try `barplot(c(1,2,3))`.  A new window will pop up with a graph like the one below

```{r echo=FALSE}
barplot(c(1,2,3))
```


First steps in R with Rstudio
======================================================== 

[Rstudio](http://www.rstudio.com/) is an integrated development
environment (IDE) for `R`.

Try again `boxplot(1,2,3)`.  In _Rstudio_, the plots appear in a special area.
In other environments, such commands just pop up a new window.

## How did the installation go ?

<div class="footer">Tip: press the <code>tab</code> (↹) key for "<em>tab completion</em>"</div>


Packages
======================================================== 

<div class="footer">Tip: never use `library()` in functions, use `requireNamespace()`.</div>

`R` _packages_ are software libraries used to provide extensions
to `R`'s base functionalities.  Two steps are necessary to use them:

 - First, _install_ the packages.  This means downloading them from
   a repository and installing their files in a specific directory
   on the drive.
   
 - Then, make the functions of the package available to `R` in the
   memory, typically using the `library()` command.
   
*** 

There four main sources of packages

 - the Complete `R` Archive Network (CRAN),
 - Bioconductor,
 - GitHub (`devtools::install_github`),
 - For Linux users (especially Debian and Ubuntu), binary packages.
 

R packages from Linux distributions
======================================================== 

R packages from distributions like Debian can be old.  But equally old.

Example <https://packages.debian.org/r-bioc-edger>

Linux distribution are usually better regarding external dependancies.

Packages can be installed in various locations; one possible explanation
for ununderstandable errors is that an older version of the package,
installed in a higher-priority location, took precedence.


Example installation from RStudio
======================================================== 

```r
install.packages("rmarkdown")
```

<center>~ or ~</cente>


![](InstallPackages.png)


# R Markdown
======================================================== 

![](OpenMarkdown.png)

![](Markdown.png)


Tip: put a command in parenthesis to force ouptut of its value.

```{r}
x <- 1
(x <- 1)
```



# Reproducible research with R, Rmarkdown and knitR
======================================================== 

In the standard source code, comments are escaped.

    x <- 1 # important


In contrast, in _literate programming_ text is comment, and code is fenced.


    We set `x` to `1` because this number is _important_.
    ```{r}
    x <- 1
    ```


`knitR` executes the R code in the Rmarkdown file, and embeds the
results of the commands in the final document in various formats such
as HTML, Markdown, PDF or MS-Word.

***This way, the commands used to make a figure are never lost.***

Let's try it in _Rstudio_.

## Tip number 4:

Always run sessionInfo() at the end.



Actually, this presentation was made with RStudio
======================================================== 

Screenshot

<https://support.rstudio.com/hc/en-us/articles/200486468-Authoring-R-Presentations>



# Integration between Git and RStudio.
======================================================== 

Cherry on the cake, RStudio has a nice interface to work with Git
repositories.  If time remains, let's see it in action.


Where to get support
======================================================== 

Biostars, Support.BioC biostar. StackOverflow, Biostars: discuss in public !

Example Horizon 2020

Docker, packrat, ...




Make your R packages with Rstudio
======================================================== 

A R package contains a bit of metadata, R functiond, unit tests, and
documentation in Sweave or... Markdown.

Let's see <https://github.com/charles-plessy/oscR>.

(Build and reload, etc.)


Pipes in <code>R</code>: <code>magrittr</code>, ...
======================================================== 

<http://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html>

`head(unique(round(subset(mydataframe, value > 100` .... and how many closing parentheses after this ?

Pipes in the shell:

```sh
grep myfile.txt | head
```

Pipes in `R` with `magrittr`.

```
mydataframe %>% head
```

Open science
======================================================== 

With all these tools, you can make excellent open science.

 ❦ Make your work reproducible from the start.  **This includes
   discussiong with your collaborators and making very sure that
   they understand what is meant by <em>open</em>.**
 
 ❦ Think loud, discuss loud, blog, tweet, discuss your technical
   issues on forums such as
   [StackOverflow](https://stackoverflow.com/) or
   [Biostars](https://www.biostars.org/), so that 1) everybody elese
   can learn from your experience and 2) in a year or two, when you
   have forgot the answers, you can find them with a simple search
   engine.

 ❦ Release atomic units of your work on platform providing version
   control, continuous integration and website rendering.

 ❦ Open your raw data on Figshare, Dryad, Zotero, ...

 ❦ Make your manuscript available as a preprint on
   [bioRxiv](http://biorxiv.org/) prior submitting to peer review.
   
  
Make your science open and reproducible !
======================================================== 


## For reproducible research, we want to:

Ensure that us and others can reach the same conclusion when the
experiment is performed again.  Translated to bioinformatics, that
means to:
 
 ❦ Keep a track of the commands that were run;

 ❦ Prove that the results are not erroneous (file swap, ...) or
   manipulated, by showing how to re-generate table and figure
   elements from scratch;

 ❦ Remember when and how we developed our analysis (this is also handy
   in case of authorship disputes...).  This is the first step towards
   letting others confirm or challenge the results with other tools.

## Open science

The best practices of open science set the stage for reproducible research.


Thanks
=======================================

Questions ?