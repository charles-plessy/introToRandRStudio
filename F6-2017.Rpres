<style>
.footer {
    color: black; background: #E8E8E8;
    position: fixed; top: 90%;
    text-align:center; width:100%;
}
.midcenter {
    position: fixed;
    top: 50%;
    left: 50%;
}
.small-code pre code {
  font-size: 1.25em;
}
</style>

Introduction to R, RStudio, R Notebooks and R presentations
========================================================
author: Charles Plessy
date: Yokohama, August 30th
autosize: true

<br/>
<center class="midcenter">![R](Aufseeser_lettrine_R.png)</center>
<br/>


Why R?
========================================================

 ❦ Because my colleagues use it.

 ❦ Because it has extensive coverage and documentation
   on statistics and bioinformatics.
 
 ❦ To prepare figures that add graphical elegance to the facts.

 ❦ Because it is efficient.
 
 ❦ Because it plays well with open science and reproducible research.

 ❦ Because I love it.


What is R ?
========================================================

`R` is a language.  You can use it write commands that ask the
computer to do things for you, and you can combine them in programs
(also called _scripts_).

`R` is **Free software**.

`R` is an interactive platform that can be used for exploratory
analysis.  It is very good at quickly plotting summaries.

With extensions such as _R Shiny_ and _R Markdown_, `R` is also
becoming a platform for releasing results.


The R language
======================================================== 
class: small-code

`R` calls variable "_objects_"; their names are plain text (no prefix such as `$`, etc.).
In `R` programs, objects are rarely declared before use, but beware that they have no default value.

```{r error=TRUE}
x + 1
```

Pay attention to the error messages: here we forget to quote text.

```{r error=TRUE}
read.csv(file = myFile.csv)
```


How to assign values to the objects
======================================================== 

Just like in English, in programming languages, pay attention that "is equal to" and
"is it equal to" can misleadingly look the same.

```{r}
x = 1
x
```

```{r}
x == 1
```

***

In this lecture, and like in many `R` resources, the leftwards arrow ("`<-`")" is used
instead of the equal sign.  The rightwards arrow is seen more rarely, but can be
useful in interactive sessions.

```{r}
x <- 1
1 -> x
```


The R language likes vectors
======================================================== 
class: small-code

Most languages made differences between _scalars_ and _arrays_.
In `R`, _scalars_ are vectors of length one.

```{r}
"a"
c("a")
c("a", "b")
```

***

Vectorized operations in R are idiomatic and efficient.  Short vectors
are often _recycled_.

```{r}
x <- c(1,2,3)
y <- c(10, 10, 20)
x + y
paste(x, y, sep = "_")
paste0(x, ".txt")
```


Lists: a second cornerstone class of R
======================================================== 
class: small-code

Vectors only contain elements of the same kind.  R often
_coerces_ data when needed.

```{r error = TRUE}
x <- c(1, 2, 3, "apples!")
x
class(x)
c(1, c(2, 3), FALSE)
```

***

Lists can mix elements from many kinds, and can be nested.

```{r}
list(c(2, 3), "hello", list(T,F))
```


Data frames: a famous object class from the R language
======================================================== 
class: small-code

`data.frame`s are lists presented like tables. For more performance
or modernity, look for `DataFrame`, `data.table` or `tibble`.

```{r}
df <- data.frame(
  fruits = c("apples", "bananas", "oranges"),
  price  = c(2, 1.5, 1.7),
  color  = factor(c("yellow", "yellow", "orange")),
  stringsAsFactors = FALSE)
summary(df)
```


Subsetting elements of objects
======================================================== 
class: small-code

In brief: by coordinate...

```{r}
letters[6]
df[2,3]
df[,1]
```

***

...or by name:

```{r}
df[["price"]]
df$pri
```

Tip: in `R`, (almost) everything has a manual page.  Try: `help("[")`


R has different ways to say "nothing"
======================================================== 

 - `NA` is for missing values.  This has a special meaning
in statistics.

 - `NULL` is nothing.
 
 - `NaN` is "_not a number_".  This avoids interrupting
    computation with errors.

```{r}
0 / 0
```

***

```{r}
sum(1,2,NA)
sum(1,2,NA, na.rm=T)
sum(1,NULL)
```


The R console
======================================================== 

R has a command line interface (CLI).  If you know nothing about `R`,
you can use it like a calculator.

```{r}
1 + 1
```

***

`R` is very useful at quickly preparing graphs.  Try `barplot(c(1,2,3))`.

```{r echo=FALSE}
barplot(c(1,2,3))
```


First steps in R with RStudio
======================================================== 

[Rstudio](http://www.rstudio.com/) is an integrated development
environment (IDE) for `R`.

Try again `boxplot(1,2,3)`.  In _Rstudio_, the plots appear in a special area.
In other environments, such commands just pop up a new window.

## By the way, how did the installation go ?

If you could not install `R`, try it on-line, for instance:

 - <http://tryr.codeschool.com/>.
 - <https://try.jupyter.org/> (chose Welcome R - demo).

<div class="footer">Tip: press the <code>tab</code> (↹) key for "<em>tab completion</em>"</div>


Packages
======================================================== 

<div class="footer">Tip: never use <code>library()</code> in functions, use <code>requireNamespace()</code>.</div>

`R` _packages_ are software libraries used to extend `R`'s base functions.

 - _Installing_ packages means downloading them and installing their files in a 
   pecific directory.
   
 - To use the packages within `R`, load it using commands like `library()`.
   
*** 

There four main sources of packages

 - the Complete `R` Archive Network ([CRAN](https://cran.r-project.org/)),
 - [Bioconductor](https://bioconductor.org/),
 - [GitHub](https://github.com/) (`devtools::install_github`),
 - For Linux users (especially Debian and Ubuntu), binary packages.
 

Example installation from RStudio
======================================================== 

```r
install.packages("rmarkdown")
```
<center>~ or ~

![](InstallPackages.png)</center>


R Markdown
======================================================== 

![](OpenMarkdown.png)

![](Markdown.png)


Reproducible research with R, Rmarkdown and knitR
======================================================== 
class: small-code

In the standard source code, comments are escaped.

    x <- 1 # important


In contrast, in _literate programming_ text is comment, and code is fenced.


    We set `x` to `1` because this number is _important_.
    ```⎨r⎬
    x <- 1
    ```

`knitR` executes the R code in the R Markdown file, and embeds the
results in the final document in various formats such
as HTML, Markdown, PDF...


Actually, this presentation was made with RStudio
======================================================== 

Some on-line documentation:

<https://support.rstudio.com/hc/en-us/articles/200486468-Authoring-R-Presentations>

Let's edit it together.  Cherry on the cake, RStudio has a nice interface to work with __Git
repositories__.  Let's see it in action.

 - read-only: `https://github.com/charles-plessy/introToRandRStudio.git`
 - read/write (for the author): `git@github.com:charles-plessy/introToRandRStudio.git`


Where to get support
======================================================== 

Think loud, discuss loud, blog, [toot](https://en.wikipedia.org/wiki/Mastodon_(software)),
discuss your technical issues on forums such as [StackOverflow](https://stackoverflow.com/)
or [Biostars](https://www.biostars.org/), so that 1) everybody else can learn from your experience
and 2) in a year or two, when your _future self_ have forgot the answers, you can find them
with a simple search engine.
   
  
Make your science open and reproducible !
======================================================== 

## For reproducible research, we want to:

Ensure that us and others can reach the same conclusion when the
experiment is performed again.  Translated to bioinformatics, that
means to:
 
 ❦ Keep a track of the commands that were run;

 ❦ Prove that the results are not erroneous (file swap, ...) or
   manipulated, by showing how to re-generate table and figure
   elements from scratch;

 ❦ Remember when and how we developed our analysis (this is also handy
   in case of authorship disputes...).  This is the first step towards
   letting others confirm or challenge the results with other tools.


Thanks
=======================================

Questions ?